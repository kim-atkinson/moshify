/* The :root selector targets the highest level parent, which would be the <html> tag in an HTML document. The :root has a higher specificity, as it is a pseudo-class instead of a plain element.
 */

:root {
  --color-primary: #2584ff;
  --color-secondary: #00d9ff;
  --color-accent: #ff3400;
  --color-headings: #1b0760;
  --color-body: #918ca4;
  --color-body-darker: #5c5577;
  --color-border: #cccccc;
  --border-radius: 30px;
}

*,
*::after,
*::before {
  /* border-box: the width and height properties (and min/max properties) includes content, padding and border */
  box-sizing: border-box;
}

/* Typography */

html {
  /* 62.5% of 16px = 10px */
  font-size: 62.5%;
}

body {
  font-family: Inter, Arial, Helvetica, sans-serif;
  font-size: 2.4rem;
  line-height: 1.5;
  color: var(--color-body);
}

h1,
h2,
h3 {
  color: var(--color-headings);
  margin-bottom: 1rem;
  line-height: 1.1;
}

h1 {
  /* 1 x font size of the html element */
  font-size: 7rem;
}
h2 {
  font-size: 4rem;
}
h3 {
  font-size: 3rem;
}

p {
  margin-top: 0;
}

/* Standard breakpoint that a lot of frameworks like bootstrap and tailwind use */
@media screen and (min-width: 1024px) {
  body {
    font-size: 1.8rem;
  }

  h1 {
    font-size: 8rem;
  }

  h2 {
    font-size: 4rem;
  }

  h3 {
    font-size: 2.4rem;
  }
}

/* Links */

a {
  text-decoration: none;
}

/* Values from the mobile version of the design */
.link-arrow {
  color: var(--color-accent);
  text-transform: uppercase;
  font-size: 2rem;
  font-weight: bold;
}
.link-arrow::after {
  content: "-->";
  /* Using a pixel value because always wants a little bit of space no matter how big the screen gets */
  margin-left: 5px;
  /* identify the element you want to target then add transition */
  transition: margin 0.15s;
}

.link-arrow:hover::after {
  margin-left: 10px;
}

/* create media queries for each component to make it easier to locate and enable option to keep or change component at different breakpoints */
@media screen and (min-width: 1024px) {
  .link-arrow {
    font-size: 1.5rem;
  }
}

/* Badges */

.badge {
  border-radius: 20px;
  font-size: 2rem;
  font-weight: 600;
  padding: 0.5rem 2rem;
  white-space: nowrap;
}
.badge--primary {
  background-color: var(--color-primary);
  color: #ffffff;
}
.badge--secondary {
  background: var(--color-secondary);
  color: #ffffff;
}
.badge--small {
  font-size: 1.6rem;
  padding: 0.5rem 1.5rem;
}

@media screen and (min-width: 1024px) {
  .badge {
    font-size: 1.5rem;
  }

  .badge--small {
    font-size: 1.2rem;
  }
}

/* Lists */
.list {
  list-style: none;
  padding-left: 0;
  color: var(--color-headings);
}
.list--inline .list__item {
  display: inline-block;
  margin-right: 2rem;
}

.list--tick {
  list-style-image: url(../images/tick.svg);
  padding-left: 3rem;
}

.list--tick .list__item {
  padding-left: 0.5rem;
  margin-bottom: 1rem;
}

@media screen and (min-width: 1024px) {
  .list--tick .list__item {
    padding-left: 0;
  }
}

/* Icons */

.icon {
  width: 40px;
  height: 40px;
}

.icon--small {
  height: 30px;
  width: 30px;
}

.icon--primary {
  /* fill property only applies to svg images */
  fill: var(--color-primary);
}

.icon--white {
  fill: #ffffff;
}

/* Could create use cases from other icon colors, however, not necessary right now. No need to solve a problem that doesn't exist. A lot of developers fall in that trap of over-engineering and solving non-existent problems.  */

/* Single hyphen because it's not a variation or modifier of the icon class. It's an entirely new class. In BEM a single hyphen is used to separate multiple words */
.icon-container {
  background: #f3f9fa;
  /* Using pixels because icons are always the same on mobile and desktop they don't change relative to the screen size. That's why an absolute unit is being used */
  width: 64px;
  height: 64px;
  border-radius: 100%;
  /* Block isn't being used because it might be used next to an element and doesn't want a line-breaker. inline-block changed to flex */
  display: inline-flex;
  /* alinging on the primary access, which is by default the horizontal access */
  justify-content: center;
  /* aligning on the secondary axis, which is by default the vertical access */
  align-items: center;
}

.icon-container--accent {
  background: var(--color-accent);
}
/* Buttons */

.btn {
  border-radius: 40px;
  border: 0;
  cursor: pointer;
  font-size: 1.8rem;
  font-weight: 600;
  margin: 1rem 0;
  outline: 0;
  padding: 2rem 3rem;
  text-align: center;
  text-transform: uppercase;
  /* in case there's limited space, don't want the button to wrap onto the second line */
  white-space: nowrap;
}

.btn .icon {
  width: 2rem;
  height: 2rem;
  margin-right: 1rem;
  vertical-align: middle;
}

/* by default browser set sizing of button elements to border box */
.btn--primary {
  background: var(--color-primary);
  color: #ffffff;
}

.btn--primary:hover {
  background: #3a8ffd;
}

.btn--secondary {
  background: var(--color-secondary);
  color: #ffffff;
}

.btn--secondary:hover {
  background: #00c8eb;
}

.btn--accent {
  background: var(--color-accent);
  color: #ffffff;
}

.btn--accent:hover {
  background: #ec3000;
}

.btn--stretched {
  padding-left: 6rem;
  padding-right: 6rem;
}
.btn--block {
  width: 100%;
  /* anchor elements are inline by default, if you just give them a width, that's not going to work */
  display: inline-block;
}

.btn--outline {
  background: #ffffff;
  color: var(--color-headings);
  border: 2px solid var(--color-headings);
}

.btn--outline:hover {
  background: var(--color-headings);
  color: #fff;
}

@media screen and (min-width: 1024px) {
  .btn {
    font-size: 1.5rem;
  }
}

/* Inputs */

.input {
  border-radius: var(--border-radius);
  border: 1px solid var(--color-border);
  color: var(--color-headings);
  font-size: 2rem;
  /* gets rid of the outline chrome adds automatically */
  outline: 0;
  padding: 1.5rem 3.5rem;
}

::placeholder {
  color: #cdcbd7;
}

.input-group {
  border: 1px solid var(--color-border);
  border-radius: var(--border-radius);
  display: flex;
}

.input-group .input {
  border: 0;
  /* enables input field to grow to take up all the available space. */
  flex-grow: 1;
  padding: 1.5rem 2rem;
}

.input-group .btn {
  margin: 4px;
}

@media screen and (min-width: 1024px) {
  .input {
    font-size: 1.5rem;
  }
}

/* Cards */

/* don't want to apply a width, because the width should be fluid and flexible and the size should be determined by its container */

.card {
  border-radius: 7px;
  box-shadow: 0 0 20px 10px #f3f3f3;
  /* round corners disappear from header(and body?) element because it is overflowing from the container. so it becomes necessary to det to overflow hidden */
  overflow: hidden;
}

.card__header,
.card__body {
  padding: 2rem 3rem;
}

.card--primary .card__header {
  background: var(--color-primary);
  color: #ffffff;
}

.card--secondary .card__header {
  background: var(--color-secondary);
  color: #ffffff;
}

.card--primary .badge--primary {
  background: #126de4;
}

/* rules, can also be read as - whenever you have a secondary badge in a secondary card */
.card--secondary .badge--secondary {
  background: #02cdf1;
}

/* Plans */
.plan {
  transition: transform 0.2s ease-out;
}

.plan__name {
  color: #ffffff;
  /* inheriting margins from H3 elements */
  margin: 0;
  font-weight: 500;
  font-size: 2.4rem;
}

.plan__price {
  font-size: 6rem;
}

.plan__billing-cycle {
  font-size: 2.4rem;
  font-weight: 300;
  opacity: 0.8;
  margin-right: 1rem;
}

.plan__description {
  font-size: 2rem;
  font-weight: 300;
  letter-spacing: 1px;
  display: block;
}

.plan .list__item {
  margin-bottom: 2rem;
}

.plan--popular {
  transform: scale(1.1);
}

.plan--popular .card__header {
  position: relative;
}

.plan--popular .card__header::before {
  content: url(../images/popular.svg);
  width: 40px;
  display: inline-block;
  position: absolute;
  top: -6px;
  right: 5%;
}

.plan:hover {
  transform: scale(1.05);
}

.plan--popular:hover {
  transform: scale(1.15);
}
@media screen and (min-width: 1024px) {
  .plan__name {
    font-size: 1.4rem;
  }

  .plan__price {
    font-size: 5rem;
  }

  .plan__billing-cycle {
    font-size: 1.6rem;
  }

  .plan__description {
    font-size: 1.7rem;
  }
}

/* Media */

.media {
  display: flex;
}

.media__title {
  margin-top: 0;
}

.media__body {
  margin: 0 2rem;
}

.media__image {
  margin-top: 1rem;
}

/* Quotes */

.quote {
  font-size: 3rem;
  font-style: italic;
  color: var(--color-body-darker);
  line-height: 1.3;
}

.quote__text::before {
  content: open-quote;
}

.quote__text::after {
  content: close-quote;
}

.quote__author {
  font-style: normal;
  font-weight: 500;
  font-size: 3rem;
  margin-bottom: 0;
}

.quote__organization {
  font-size: 2rem;
  font-style: normal;
  letter-spacing: 1px;
  color: var(--color-headings);
  opacity: 0.4;
}

.quote__line {
  position: relative;
  bottom: 10px;
}

@media screen and (min-width: 1024px) {
  .quote {
    font-size: 2rem;
  }

  .quote__author {
    font-size: 2.4rem;
  }

  .quote__organization {
    font-size: 1.6rem;
  }
}

/* Grids */

.grid {
  display: grid;
}

@media screen and (min-width: 768px) {
  .grid--1x2 {
    grid-template-columns: 1fr 1fr;
  }
}

@media screen and (min-width: 1024px) {
  .grid--1x3 {
    grid-template-columns: 1fr 1fr 1fr;
  }
}

/* Testimonials */

.testimonial {
  padding: 3rem;
}

.testimonial__image {
  position: relative;
}

/* most times you should avoid direct child selector because you don't want your CSS to know about your markup because if the markup changes you have to comeback and change your CSS as well, but this is an exception , or you can just creat a whole other class 5:18 time-stamp */
.testimonial__image > img {
  width: 100%;
}

.testimonial__image > .icon-container {
  position: absolute;
  top: 3rem;
  /* initially positioned at the edge of the testimonial image. got the right number by dividing the icon size by 2 */
  right: -32px;
}

@media screen and (min-width: 768px) {
  .testimonial .quote,
  .testimonial .quote__author {
    font-size: 2.4rem;
  }

  .testimonial .quote {
    margin-left: 6rem;
  }

  .testimonial .quote {
    margin-left: 6rem;
  }
}

/* Callouts */

.callout {
  padding: 4rem;
  border-radius: 5px;
}

.callout--primary {
  background: var(--color-primary);
  color: #ffffff;
}

.callout__heading {
  color: #ffffff;
  margin-top: 0;
  font-size: 3rem;
}

.callout .btn {
  justify-self: center;
  align-self: center;
}

.callout__content {
  text-align: center;
}

@media screen and (min-width: 768px) {
  .callout .grid--1x2 {
    grid-template-columns: 1fr auto;
  }
  .callout__content {
    text-align: left;
  }

  .callout .btn {
    justify-self: start;
    margin: 0 2rem;
  }
}

/* Collapsibles */

.collapsible__header {
  display: flex;
  justify-content: space-between;
}

.collapsible__heading {
  margin-top: 0;
  font-size: 3rem;
}

.collapsible__chevron {
  transform: rotate(-90deg);
  transition: transform 0.3s;
}

.collapsible__content {
  /* can't use display property to animate collapsing */
  /* with a height of 0 there will be overflow. so that the content will still be visible no matter what state the collapsible is in */
  max-height: 0;
  overflow: hidden;
  opacity: 0;
  transition: all 0.3s;
}

.collapsible--expanded .collapsible__chevron {
  transform: rotate(0);
}

.collapsible--expanded .collapsible__content {
  /* allows the cntent to stretch vertically when triggered. use max-height versus height so that it doesn't stretch more than is needed */
  max-height: 100vh;
  opacity: 1;
}

/* Blocks */

.block {
  --padding-vertical: 6rem;
  padding: var(--padding-vertical) 2rem;
}

.block__header {
  text-align: center;
}

.block__heading {
  margin-top: 0;
}

.block--dark {
  background: #000000;
  color: #7b858b;
}

.block--dark .block__heading {
  color: #ffffff;
}

.block--skewed-right {
  padding-bottom: calc(var(--padding-vertical) + 4rem);
  clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 80%);
}

.block--skewed-left {
  padding-bottom: calc(var(--padding-vertical) + 4rem);
  clip-path: polygon(0% 0%, 100% 0%, 100% 80%, 0% 100%);
}

.container {
  max-width: 1140px;
  margin: 0 auto;
}

/* Navigation Bar */

/* can't change the space included with the logo */
.nav {
  background: #000000;
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
  padding: 0 1rem;
  align-items: center;
}

.nav__list {
  width: 100%;
  margin: 0;
}

.nav__item {
  padding: 0.5rem 2rem;
  border-bottom: 1px solid #222;
}

.nav__item > a {
  color: #d2d0db;
  transition: color 0.3s;
}

.nav__item > a:hover {
  color: #fff;
}

.nav__toggler {
  opacity: 0.5;
  transition: box-shadow 0.15s;
  cursor: pointer;
}

/* able to select element with both classes */
.nav.collapsible--expanded .nav__toggler {
  opacity: 1;
  box-shadow: 0 0 0 3px #666666;
  border-radius: 5px;
}

.nav__brand {
  transform: translateY(5px);
}

@media screen and (min-width: 768px) {
  .nav__toggler {
    display: none;
  }

  .nav__list {
    width: auto;
    display: flex;
    font-size: 1.6rem;
    /* this makes the content visible */
    max-height: 100%;
    opacity: 1;
  }

  .nav__item {
    border: 0;
  }
}

/* Hero */

/* later on if we find other elements can use the same styles, want to combine together in a differnet class - want to use object-oriented principles */

.hero {
  clip-path: polygon(0% 0%, 100% 0%, 100% 90%, 0% 100%);
}

.hero__tagline {
  font-size: 2rem;
  color: #b9c3cf;
  letter-spacing: 1px;
  margin: 2rem 0 5rem;
}

.hero__image {
  width: 100%;
}

@media screen and (min-width: 768px) {
  .hero {
    padding-top: 0;
  }

  .hero__content {
    text-align: left;
    align-self: center;
  }
}

/* Domain Block */

.block-domain .input-group {
  box-shadow: 0 0 30px 20px #e6ebee;
  border: 0;
  margin: 4rem auto;
  max-width: 670px;
}

.block-domain__prices {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(2, 6rem);
  font-size: 2rem;
  font-weight: 600;
  justify-items: center;
  max-width: 700px;
  margin: 0 auto;
}

@media screen and (min-width: 768px) {
  .block-domain__prices {
    grid-template-columns: repeat(auto-fit, minmax(10rem, 1fr));
  }
}

/* Plans Block */

.block-plans .grid {
  gap: 8rem 4rem;
}

.block-plans .card {
  max-width: 500px;
  margin: 0 auto;
}

/* Features */

.feature {
  gap: 4rem 2rem;
  margin: 12rem 0;
}

.feature:first-of-type {
  margin-top: 6rem;
}

.feature__heading {
  margin: 1rem 0;
}

.feature__image {
  width: 100%;
}

@media screen and (min-width: 768px) {
  .feature:nth-of-type(even) .feature__content {
    order: 2;
  }
}
