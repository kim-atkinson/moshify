/* The :root selector targets the highest level parent, which would be the <html> tag in an HTML document. The :root has a higher specificity, as it is a pseudo-class instead of a plain element.
 */

:root {
  --color-primary: #2584ff;
  --color-secondary: #00d9ff;
  --color-accent: #ff3400;
  --color-headings: #1b0760;
  --color-body: #918ca4;
}

*,
*::after,
*::before {
  /* border-box: the width and height properties (and min/max properties) includes content, padding and border */
  box-sizing: border-box;
}

/* Typography */

html {
  /* 62.5% of 16px = 10px */
  font-size: 62.5%;
}

body {
  font-family: Inter, Arial, Helvetica, sans-serif;
  font-size: 2.4rem;
  line-height: 1.5;
  color: var(--color-body);
}

h1,
h2,
h3 {
  color: var(--color-headings);
  margin-bottom: 1rem;
}

h1 {
  /* 1 x font size of the html element */
  font-size: 7rem;
}
h2 {
  font-size: 4rem;
}
h3 {
  font-size: 3rem;
}

p {
  margin-top: 0;
}

/* Standard breakpoint that a lot of frameworks like bootstrap and tailwind use */
@media screen and (min-width: 1024px) {
  body {
    font-size: 1.8rem;
  }

  h1 {
    font-size: 8rem;
  }

  h2 {
    font-size: 4rem;
  }

  h3 {
    font-size: 2.4rem;
  }
}

/* Links */

a {
  text-decoration: none;
}

/* Values from the mobile version of the design */
.link-arrow {
  color: var(--color-accent);
  text-transform: uppercase;
  font-size: 2rem;
  font-weight: bold;
}
.link-arrow::after {
  content: "-->";
  /* Using a pixel value because always wants a little bit of space no matter how big the screen gets */
  margin-left: 5px;
  /* identify the element you want to target then add transition */
  transition: margin 0.15s;
}

.link-arrow:hover::after {
  margin-left: 10px;
}

/* create media queries for each component to make it easier to locate and enable option to keep or change component at different breakpoints */
@media screen and (min-width: 1024px) {
  .link-arrow {
    font-size: 1.5rem;
  }
}

/* Badges */

.badge {
  border-radius: 20px;
  font-size: 2rem;
  font-weight: 600;
  padding: 0.5rem 2rem;
  white-space: nowrap;
}
.badge--primary {
  background-color: var(--color-primary);
  color: #ffffff;
}
.badge--secondary {
  background: var(--color-secondary);
  color: #ffffff;
}
.badge--small {
  font-size: 1.6rem;
}

@media screen and (min-width: 1024px) {
  .badge {
    font-size: 1.5rem;
  }

  .badge--small {
    font-size: 1.2rem;
  }
}

/* Lists */
.list {
  list-style: none;
  padding-left: 0;
  color: var(--color-headings);
}
.list--inline .list__item {
  display: inline-block;
  margin-right: 2rem;
}

.list--tick {
  list-style-image: url(../images/tick.svg);
  padding-left: 3rem;
}

.list--tick .list__item {
  padding-left: 0.5rem;
  margin-bottom: 1rem;
}

@media screen and (min-width: 1024px) {
  .list--tick .list__item {
    padding-left: 0;
  }
}

/* Icons */

.icon {
  width: 40px;
  height: 40px;
}

.icon--primary {
  /* fill property only applies to svg images */
  fill: var(--color-primary);
}

/* Could create use cases from other icon colors, however, not necessary right now. No need to solve a problem that doesn't exist. A lot of developers fall in that trap of over-engineering and solving non-existent problems.  */

/* Single hyphen because it's not a variation or modifier of the icon class. It's an entirely new class. In BEM a single hyphen is used to separate multiple words */
.icon-container {
  background: #f3f9fa;
  /* Using pixels because icons are always the same on mobile and desktop they don't change relative to the screen size. That's why an absolute unit is being used */
  width: 64px;
  height: 64px;
  border-radius: 100%;
  /* Block isn't being used because it might be used next to an element and doesn't want a line-breaker. inline-block changed to flex */
  display: inline-flex;
  /* alinging on the primary access, which is by default the horizontal access */
  justify-content: center;
  /* aligning on the secondary axis, which is by default the vertical access */
  align-items: center;
}

/* Buttons */

.btn {
  border-radius: 40px;
  border: 0;
  cursor: pointer;
  font-size: 1.8rem;
  font-weight: 600;
  margin: 1rem 0;
  padding: 2rem 3rem;
  text-align: center;
  text-transform: uppercase;
  /* in case there's limited space, don't want the button to wrap onto the second line */
  white-space: nowrap;
}

/* by default browser set sizing of button elements to border box */
.btn--primary {
  background: var(--color-primary);
  color: #ffffff;
}

.btn--primary:hover {
  background: #3a8ffd;
}

.btn--secondary {
  background: var(--color-secondary);
  color: #ffffff;
}

.btn--secondary:hover {
  background: #00c8eb;
}

.btn--accent {
  background: var(--color-accent);
  color: #ffffff;
}

.btn--accent:hover {
  background: #ec3000;
}

.btn--block {
  width: 100%;
  /* anchor elements are inline by default, if you just give them a width, that's not going to work */
  display: inline-block;
}

.btn--outline {
  background: #ffffff;
  color: var(--color-headings);
  border: 2px solid var(--color-headings);
}

.btn--outline:hover {
  background: var(--color-headings);
  color: #fff;
}

@media screen and (min-width: 1024px) {
  .btn {
    font-size: 1.5rem;
  }
}
